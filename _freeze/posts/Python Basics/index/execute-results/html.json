{
  "hash": "be313eb9bedfbd9bd76d4964491e9a85",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Basics\"\nauthor: \"Dylan Rogers\"\ndate: \"2025-02-10\"\ncategories: [Python]\nimage: \"PythonLogo.jpg\"\n\ntoc: true\n\nformat:\n  html:\n    code-fold: true\n---\n\n\n# Introduction to Python\n\n\n## What is Python?\nPython is a high-level, interpreted programming language. This is a simple Python code:\n\n::: {#5ca57961 .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n## Variables and Data Types\nIn Python, variables can store data of different types without explicitly declaring the type.\n\nFor example:\n\n::: {#68b498c4 .cell execution_count=2}\n``` {.python .cell-code}\nintegerVariable = 10\nstringVariable = \"Hello\"\nfloatVariable = 10.5\n\nfloatVariable\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n10.5\n```\n:::\n:::\n\n\n## Control Structures\nPython supports the usual logical conditions from mathematics:\n\n::: {#79f45a1f .cell execution_count=3}\n``` {.python .cell-code}\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a < b\n# Less than or equal to: a <= b\n# Greater than: a > b\n# Greater than or equal to: a >= b\n```\n:::\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n::: {#e91ec814 .cell execution_count=4}\n``` {.python .cell-code}\n# if statement:\nif(5 > 2):\n    print(\"Five is greater than two!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFive is greater than two!\n```\n:::\n:::\n\n\n## Functions\nA function is a block of code which only runs when it is called.\n\nYou can pass data, known as parameters, into a function.\n\nA function can return data as a result.\n\n::: {#f1e960fd .cell execution_count=5}\n``` {.python .cell-code}\n# Defining a function:\ndef myFunction():\n    print(\"Hello from a function\")\n\n# Calling a function:\nmyFunction()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello from a function\n```\n:::\n:::\n\n\n## Lists and Dictionaries\nA list is a collection which is ordered and changeable.\n\nA dictionary is a collection which is unordered, changeable and indexed.\n\n::: {#490d46d1 .cell execution_count=6}\n``` {.python .cell-code}\n# List example:\nmyList = [\"apple\", \"banana\", \"cherry\"]\n\n# Dictionary example:\nmyDict = {\"name\": \"John\", \"age\": 36}\n```\n:::\n\n\n## Operators\nAll operators that are shown below will work just as you would expect them to for numbers.\n\nThese operators are sometimes defined for other classes but not always\n\n::: {#0fe21bf1 .cell execution_count=7}\n``` {.python .cell-code}\n# + is used for addition \n# - is used for subtraction\n# * is used for multiplication\n# ** is used for exponents\n# / is used for division\n# // is used for integer division\n```\n:::\n\n\n## Slicing\nSlicing allows you to get a substring of a string from 2 different points.\n\n::: {#79928ad0 .cell execution_count=8}\n``` {.python .cell-code}\n# string[a:b] means that it starts at the index a and goes up to but not including index b\n# string[a:] means that it starts at the index a and goes all the way to the end\n# string[:b] means that it starts at the beginning and goes up to but not including index b\n# string[-a:] means that it will take the last a amount of letters\n# string[:-b] means that it will leave off the last b amount of letters\n\n# string[a:b:s] means the same thing as above except this time s is the step size, if you make s 2 it will go every other\n```\n:::\n\n\n## Loops\n\n### While Loop\nA while loop works as a conditional loop, so as long as the condition at the start is True, then the loop will run. The condition will always be given at the start of the loop and will be checked after each iteration.\n\n::: {#afaae681 .cell execution_count=9}\n``` {.python .cell-code}\nx = 1\nwhile(x < 5):\n  print(x)\n  x += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n```\n:::\n:::\n\n\nIn this loop we are counting up to 5 but since the condition is checked at the beginning, it will not run when x = 5\n\n### For Loop\nA for loop is similar to a while loop in the fact that they both run until a condition has been met. Unlike a while loop, the for loop will automatically iterate for us.\nIn order to get the for loop to iterate for us, we first need to give it something to iterate through. I will be using the numbers from 1-4.\n\n::: {#0a8e1cef .cell execution_count=10}\n``` {.python .cell-code}\nfor x in range(1, 5):\n  print(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n```\n:::\n:::\n\n\n## Handle Errors\nSometimes we don't always get something that works, 4/0 will give you an error if you try to run the code because you can not divide by 0. Not just this in particular but in the same case you get an error you can use Try and Except in order to handle it.\n\n::: {#1c60487d .cell execution_count=11}\n``` {.python .cell-code}\na = 4\nb = 2\nc = 0\n\ntry:\n  print(\"a/b is\", a/b)\nexcept:\n  print(\"You can not divide by zero\")\n  \ntry:\n  print(\"a/c is\", a/c)\nexcept:\n  print(\"You can not divide by zero\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na/b is 2.0\nYou can not divide by zero\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}