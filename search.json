[
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dylan Rogers",
    "section": "",
    "text": "Dylan Rogers majors in Mathematics and minors in Data Analytics at SUNY Geneseo. When not working on math or data analytics, Dylan enjoys spending time skiing and snowboarding with his friends."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Dylan Rogers",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.A. in Mathematics | Aug 2022 - May 2026  Minor in Data Analytics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Dylan Rogers",
    "section": "Experience",
    "text": "Experience\nGlass and Glass Accounting Firm | Accounting Intern | September 2021 - May 2022\nLevinbook Law Firm PC | Law Intern | December 2023 - Present"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\nMar 30, 2025\n\n\nDylan Rogers\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nFinal Project\n\n\n\n\n\n\n\n\nMar 30, 2025\n\n\nDylan Rogers\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\nFeb 10, 2025\n\n\nDylan Rogers\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Python Basics/index.html",
    "href": "posts/Python Basics/index.html",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\n\nCode\nprint(\"Hello, World!\")\n\n\nHello, World!\n\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\n\nCode\nintegerVariable = 10\nstringVariable = \"Hello\"\nfloatVariable = 10.5\n\nfloatVariable\n\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n\nCode\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n\nCode\n# if statement:\nif(5 &gt; 2):\n    print(\"Five is greater than two!\")\n\n\nFive is greater than two!\n\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n\nCode\n# Defining a function:\ndef myFunction():\n    print(\"Hello from a function\")\n\n# Calling a function:\nmyFunction()\n\n\nHello from a function\n\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n\nCode\n# List example:\nmyList = [\"apple\", \"banana\", \"cherry\"]\n\n# Dictionary example:\nmyDict = {\"name\": \"John\", \"age\": 36}\n\n\n\n\n\nAll operators that are shown below will work just as you would expect them to for numbers.\nThese operators are sometimes defined for other classes but not always\n\n\nCode\n# + is used for addition \n# - is used for subtraction\n# * is used for multiplication\n# ** is used for exponents\n# / is used for division\n# // is used for integer division\n\n\n\n\n\nSlicing allows you to get a substring of a string from 2 different points.\n\n\nCode\n# string[a:b] means that it starts at the index a and goes up to but not including index b\n# string[a:] means that it starts at the index a and goes all the way to the end\n# string[:b] means that it starts at the beginning and goes up to but not including index b\n# string[-a:] means that it will take the last a amount of letters\n# string[:-b] means that it will leave off the last b amount of letters\n\n# string[a:b:s] means the same thing as above except this time s is the step size, if you make s 2 it will go every other\n\n\n\n\n\n\n\nA while loop works as a conditional loop, so as long as the condition at the start is True, then the loop will run. The condition will always be given at the start of the loop and will be checked after each iteration.\n\n\nCode\nx = 1\nwhile(x &lt; 5):\n  print(x)\n  x += 1\n\n\n1\n2\n3\n4\n\n\nIn this loop we are counting up to 5 but since the condition is checked at the beginning, it will not run when x = 5\n\n\n\nA for loop is similar to a while loop in the fact that they both run until a condition has been met. Unlike a while loop, the for loop will automatically iterate for us. In order to get the for loop to iterate for us, we first need to give it something to iterate through. I will be using the numbers from 1-4.\n\n\nCode\nfor x in range(1, 5):\n  print(x)\n\n\n1\n2\n3\n4\n\n\n\n\n\n\nSometimes we don’t always get something that works, 4/0 will give you an error if you try to run the code because you can not divide by 0. Not just this in particular but in the same case you get an error you can use Try and Except in order to handle it.\n\n\nCode\na = 4\nb = 2\nc = 0\n\ntry:\n  print(\"a/b is\", a/b)\nexcept:\n  print(\"You can not divide by zero\")\n  \ntry:\n  print(\"a/c is\", a/c)\nexcept:\n  print(\"You can not divide by zero\")\n\n\na/b is 2.0\nYou can not divide by zero"
  },
  {
    "objectID": "posts/Python Basics/index.html#introduction-to-python-1",
    "href": "posts/Python Basics/index.html#introduction-to-python-1",
    "title": "Python Basics",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts"
  },
  {
    "objectID": "posts/Python Basics/index.html#what-is-python",
    "href": "posts/Python Basics/index.html#what-is-python",
    "title": "Python Basics",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\n\nCode\nprint(\"Hello, World!\")\n\n\nHello, World!"
  },
  {
    "objectID": "posts/Python Basics/index.html#variables-and-data-types",
    "href": "posts/Python Basics/index.html#variables-and-data-types",
    "title": "Python Basics",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\n\nCode\nintegerVariable = 10\nstringVariable = \"Hello\"\nfloatVariable = 10.5\n\nfloatVariable\n\n\n10.5"
  },
  {
    "objectID": "posts/Python Basics/index.html#control-structures",
    "href": "posts/Python Basics/index.html#control-structures",
    "title": "Python Basics",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n\nCode\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n\nCode\n# if statement:\nif(5 &gt; 2):\n    print(\"Five is greater than two!\")\n\n\nFive is greater than two!"
  },
  {
    "objectID": "posts/Python Basics/index.html#functions",
    "href": "posts/Python Basics/index.html#functions",
    "title": "Python Basics",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n\nCode\n# Defining a function:\ndef myFunction():\n    print(\"Hello from a function\")\n\n# Calling a function:\nmyFunction()\n\n\nHello from a function"
  },
  {
    "objectID": "posts/Python Basics/index.html#lists-and-dictionaries",
    "href": "posts/Python Basics/index.html#lists-and-dictionaries",
    "title": "Python Basics",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n\nCode\n# List example:\nmyList = [\"apple\", \"banana\", \"cherry\"]\n\n# Dictionary example:\nmyDict = {\"name\": \"John\", \"age\": 36}"
  },
  {
    "objectID": "posts/Python Basics/index.html#operators",
    "href": "posts/Python Basics/index.html#operators",
    "title": "Python Basics",
    "section": "",
    "text": "All operators that are shown below will work just as you would expect them to for numbers.\nThese operators are sometimes defined for other classes but not always\n\n\nCode\n# + is used for addition \n# - is used for subtraction\n# * is used for multiplication\n# ** is used for exponents\n# / is used for division\n# // is used for integer division"
  },
  {
    "objectID": "posts/Python Basics/index.html#slicing",
    "href": "posts/Python Basics/index.html#slicing",
    "title": "Python Basics",
    "section": "",
    "text": "Slicing allows you to get a substring of a string from 2 different points.\n\n\nCode\n# string[a:b] means that it starts at the index a and goes up to but not including index b\n# string[a:] means that it starts at the index a and goes all the way to the end\n# string[:b] means that it starts at the beginning and goes up to but not including index b\n# string[-a:] means that it will take the last a amount of letters\n# string[:-b] means that it will leave off the last b amount of letters\n\n# string[a:b:s] means the same thing as above except this time s is the step size, if you make s 2 it will go every other"
  },
  {
    "objectID": "posts/Python Basics/index.html#loops",
    "href": "posts/Python Basics/index.html#loops",
    "title": "Python Basics",
    "section": "",
    "text": "A while loop works as a conditional loop, so as long as the condition at the start is True, then the loop will run. The condition will always be given at the start of the loop and will be checked after each iteration.\n\n\nCode\nx = 1\nwhile(x &lt; 5):\n  print(x)\n  x += 1\n\n\n1\n2\n3\n4\n\n\nIn this loop we are counting up to 5 but since the condition is checked at the beginning, it will not run when x = 5\n\n\n\nA for loop is similar to a while loop in the fact that they both run until a condition has been met. Unlike a while loop, the for loop will automatically iterate for us. In order to get the for loop to iterate for us, we first need to give it something to iterate through. I will be using the numbers from 1-4.\n\n\nCode\nfor x in range(1, 5):\n  print(x)\n\n\n1\n2\n3\n4"
  },
  {
    "objectID": "posts/Python Basics/index.html#handle-errors",
    "href": "posts/Python Basics/index.html#handle-errors",
    "title": "Python Basics",
    "section": "",
    "text": "Sometimes we don’t always get something that works, 4/0 will give you an error if you try to run the code because you can not divide by 0. Not just this in particular but in the same case you get an error you can use Try and Except in order to handle it.\n\n\nCode\na = 4\nb = 2\nc = 0\n\ntry:\n  print(\"a/b is\", a/b)\nexcept:\n  print(\"You can not divide by zero\")\n  \ntry:\n  print(\"a/c is\", a/c)\nexcept:\n  print(\"You can not divide by zero\")\n\n\na/b is 2.0\nYou can not divide by zero"
  },
  {
    "objectID": "posts/Spotify/index.html",
    "href": "posts/Spotify/index.html",
    "title": "Spotify",
    "section": "",
    "text": "Just like all starts with DataFrames, we first need to import Pandas. Now that we have the Pandas library, we can now start using DataFrames, I will assign the data containing of Spotify users’ playlist information to a variable called Spotify.\n\nimport pandas as pd\nspotify = pd.read_csv(\"https://bcdanl.github.io/data/spotify_all.csv\")\nspotify\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns\n\n\n\n\n\n\nSince I’m going to want to find my favorite artists in this DataFrame, I’m first going to need to see if my favorites are in it. In order to do that, you can use the code below, with switching the “_____” for your favorite arstist’s first and last name.\n\nspotify[spotify[\"artist_name\"] == \"_____\"]\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n\n\n\n\n\n\n\n\nI’m not the biggest fan of any particular artists. I generally would be fine with listening to a combonation of any genres or artists. Lately however, I have been getting into a Country Music phase. Of these artists that I’ve most recently listened to, I would have to say my favorites are Luke Bryan, and Luke Combs.\n\nspotify[spotify[\"artist_name\"] == \"Luke Bryan\"]\nspotify[spotify[\"artist_name\"] == \"Luke Combs\"]\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n10926\n165\nseptember\n0\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n10933\n165\nseptember\n7\nLuke Combs\nMemories Are Made Of\n216666\nThis One's for You\n\n\n10934\n165\nseptember\n8\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n10935\n165\nseptember\n9\nLuke Combs\nI Know She Ain't Ready\n184746\nThe Way She Rides\n\n\n15308\n235\nMy happy place\n31\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n24418\n383\ncountry 2017\n1\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n26908\n412\nCountry\n183\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n30178\n456\nCountry\n41\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n30338\n456\nCountry\n201\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n30339\n456\nCountry\n202\nLuke Combs\nCan I Get an Outlaw\n238826\nCan I Get an Outlaw\n\n\n30341\n456\nCountry\n204\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n30359\n456\nCountry\n222\nLuke Combs\nI Know She Ain't Ready\n184746\nThe Way She Rides\n\n\n36878\n557\nWork\n4\nLuke Combs\nLet the Moonshine\n209266\nThe Way She Rides\n\n\n45491\n680\nCountry Favorites\n112\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n46433\n690\nDark Side\n25\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n47776\n706\nMY FAV\n4\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n53055\n796\nCountry\n41\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n53524\n803\nCountry\n189\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n74232\n1096\ncountry\n131\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n74981\n1109\njustin\n16\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n78311\n1161\ncountry favs\n14\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n78351\n1161\ncountry favs\n54\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n81092\n1206\nwes\n36\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n81106\n1206\nwes\n50\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n81107\n1206\nwes\n51\nLuke Combs\nUsed to You\n236506\nUsed to You\n\n\n86879\n1299\ncountry\n90\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n100977\n1504\nCountry\n27\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n101010\n1504\nCountry\n60\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n101021\n1504\nCountry\n71\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n107951\n1608\nCountry\n80\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n107983\n1608\nCountry\n112\nLuke Combs\nUsed to You\n236506\nUsed to You\n\n\n109040\n1622\nCountry\n69\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n115524\n1724\ncountry\n33\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n117190\n1756\nCountry\n77\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n136410\n999032\nWalk Up Songs\n1\nLuke Combs\nOut There\n203680\nThis One's for You\n\n\n136420\n999032\nWalk Up Songs\n11\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n140287\n999094\nsummer 2017\n0\nLuke Combs\nOne Number Away\n221800\nThis One's for You\n\n\n154162\n999300\nCountry Vibes\n30\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n189041\n999853\nsummer\n50\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n189046\n999853\nsummer\n55\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n193814\n999928\nSummer 2017\n30\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n\n\n\n\n\nAfter seeing that each of these artists are in the DataFrame, we can now look at them individually.\nBefore we do that, we are going to switch the index to the artist to make it easier for us when looking at them individually.\n\nspotify = spotify.set_index(\"artist_name\")\n\n\n\nIn order to look at Luke Bryan’s songs within this DataFrame, we will create a new DataFrame of his songs only. Next we will look at how many songs of his are in the DataFrame. We will also look at how many of his albums have made it into the DataFrame as well. We can also find out the average time length of these songs. In order to do that, we need to get the time in milliseconds, and then convert it into minutes, rounding down. After we get the conversion, we take the remainder and convert that into seconds.\n\nLukeBryan = spotify.loc[\"Luke Bryan\"]\nnumberOfSongs = LukeBryan[\"track_name\"].nunique()\nnumberOfAlbums = LukeBryan[\"album_name\"].nunique()\naverageSongLengthInMS = float(LukeBryan[\"duration_ms\"].mean())\naverageSongLengthOfMins = int(averageSongLengthInMS / 60000)\naverageSongLengthOfSecs = int(((averageSongLengthInMS / 60000) - averageSongLengthOfMins) * 60)\naverageSongLength = str(averageSongLengthOfMins) + \":\" + str(averageSongLengthOfSecs)\nprint(\"In this DataFrame, Luke Bryan has\", numberOfSongs, \"songs, from\", numberOfAlbums, \"albums. Their songs average\", averageSongLength)\n\nIn this DataFrame, Luke Bryan has 73 songs, from 11 albums. Their songs average 3:36\n\n\nUsing this code, we have found that 73 of Luke Bryan’s songs are in this DataFrame, as well as 11 of his albums. The average time length of his songs are 3:36.\n\n\n\nNext we will be doing the same with Luke Combs. Everything will be the same, expect this time we will use Luke Combs, instead of Luke Bryan.\n\nLukeCombs = spotify.loc[\"Luke Combs\"]\nnumberOfSongs = LukeCombs[\"track_name\"].nunique()\nnumberOfAlbums = LukeCombs[\"album_name\"].nunique()\naverageSongLengthInMS = float(LukeCombs[\"duration_ms\"].mean())\naverageSongLengthOfMins = int(averageSongLengthInMS / 60000)\naverageSongLengthOfSecs = int(((averageSongLengthInMS / 60000) - averageSongLengthOfMins) * 60)\naverageSongLength = str(averageSongLengthOfMins) + \":\" + str(averageSongLengthOfSecs)\nprint(\"In this DataFrame, Luke Combs has\", numberOfSongs, \"songs, from\", numberOfAlbums, \"albums. Their songs average\", averageSongLength)\n\nIn this DataFrame, Luke Combs has 10 songs, from 4 albums. Their songs average 3:38\n\n\nUsing this code, we have found that only 10 of Luke Combs’ songs are in this DataFrame, as well as 4 of his albums. The average time length of his songs are 3:36."
  },
  {
    "objectID": "posts/Spotify/index.html#what-is-python",
    "href": "posts/Spotify/index.html#what-is-python",
    "title": "Spotify",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint(\"Hello, World!\")\n\nHello, World!"
  },
  {
    "objectID": "posts/Spotify/index.html#variables-and-data-types",
    "href": "posts/Spotify/index.html#variables-and-data-types",
    "title": "Spotify",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\nintegerVariable = 10\nstringVariable = \"Hello\"\nfloatVariable = 10.5\n\nfloatVariable\n\n10.5"
  },
  {
    "objectID": "posts/Spotify/index.html#control-structures",
    "href": "posts/Spotify/index.html#control-structures",
    "title": "Spotify",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif(5 &gt; 2):\n    print(\"Five is greater than two!\")\n\nFive is greater than two!"
  },
  {
    "objectID": "posts/Spotify/index.html#functions",
    "href": "posts/Spotify/index.html#functions",
    "title": "Spotify",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef myFunction():\n    print(\"Hello from a function\")\n\n# Calling a function:\nmyFunction()\n\nHello from a function"
  },
  {
    "objectID": "posts/Spotify/index.html#lists-and-dictionaries",
    "href": "posts/Spotify/index.html#lists-and-dictionaries",
    "title": "Spotify",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmyList = [\"apple\", \"banana\", \"cherry\"]\n\n# Dictionary example:\nmyDict = {\"name\": \"John\", \"age\": 36}"
  },
  {
    "objectID": "posts/Spotify/index.html#operators",
    "href": "posts/Spotify/index.html#operators",
    "title": "Spotify",
    "section": "",
    "text": "All operators that are shown below will work just as you would expect them to for numbers.\nThese operators are sometimes defined for other classes but not always\n\n# + is used for addition \n# - is used for subtraction\n# * is used for multiplication\n# ** is used for exponents\n# / is used for division\n# // is used for integer division"
  },
  {
    "objectID": "posts/Spotify/index.html#slicing",
    "href": "posts/Spotify/index.html#slicing",
    "title": "Spotify",
    "section": "",
    "text": "Slicing allows you to get a substring of a string from 2 different points.\n\n# string[a:b] means that it starts at the index a and goes up to but not including index b\n# string[a:] means that it starts at the index a and goes all the way to the end\n# string[:b] means that it starts at the beginning and goes up to but not including index b\n# string[-a:] means that it will take the last a amount of letters\n# string[:-b] means that it will leave off the last b amount of letters\n\n# string[a:b:s] means the same thing as above except this time s is the step size, if you make s 2 it will go every other"
  },
  {
    "objectID": "posts/Spotify/index.html#loops",
    "href": "posts/Spotify/index.html#loops",
    "title": "Spotify",
    "section": "",
    "text": "A while loop works as a conditional loop, so as long as the condition at the start is True, then the loop will run. The condition will always be given at the start of the loop and will be checked after each iteration.\n\nx = 1\nwhile(x &lt; 5):\n  print(x)\n  x += 1\n\n1\n2\n3\n4\n\n\nIn this loop we are counting up to 5 but since the condition is checked at the beginning, it will not run when x = 5\n\n\n\nA for loop is similar to a while loop in the fact that they both run until a condition has been met. Unlike a while loop, the for loop will automatically iterate for us. In order to get the for loop to iterate for us, we first need to give it something to iterate through. I will be using the numbers from 1-4.\n\nfor x in range(1, 5):\n  print(x)\n\n1\n2\n3\n4"
  },
  {
    "objectID": "posts/Spotify/index.html#handle-errors",
    "href": "posts/Spotify/index.html#handle-errors",
    "title": "Spotify",
    "section": "",
    "text": "Sometimes we don’t always get something that works, 4/0 will give you an error if you try to run the code because you can not divide by 0. Not just this in particular but in the same case you get an error you can use Try and Except in order to handle it.\n\na = 4\nb = 2\nc = 0\n\ntry:\n  print(\"a/b is\", a/b)\nexcept:\n  print(\"You can not divide by zero\")\n  \ntry:\n  print(\"a/c is\", a/c)\nexcept:\n  print(\"You can not divide by zero\")\n\na/b is 2.0\nYou can not divide by zero"
  },
  {
    "objectID": "posts/Spotify/index.html#how-to-use-the-spotify-dataframe",
    "href": "posts/Spotify/index.html#how-to-use-the-spotify-dataframe",
    "title": "Spotify",
    "section": "",
    "text": "Just like all starts with DataFrames, we first need to import Pandas. Now that we have the Pandas library, we can now start using DataFrames, I will assign the data containing of Spotify users’ playlist information to a variable called Spotify.\n\nimport pandas as pd\nspotify = pd.read_csv(\"https://bcdanl.github.io/data/spotify_all.csv\")\nspotify\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns"
  },
  {
    "objectID": "posts/Spotify/index.html#navigating-the-dataframe",
    "href": "posts/Spotify/index.html#navigating-the-dataframe",
    "title": "Spotify",
    "section": "",
    "text": "Since I’m going to want to find my favorite artists in this DataFrame, I’m first going to need to see if my favorites are in it. In order to do that, you can use the code below, with switching the “_____” for your favorite arstist’s first and last name.\n\nspotify[spotify[\"artist_name\"] == \"_____\"]\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name"
  },
  {
    "objectID": "posts/Spotify/index.html#looking-for-my-favorite-artists",
    "href": "posts/Spotify/index.html#looking-for-my-favorite-artists",
    "title": "Spotify",
    "section": "",
    "text": "I’m not the biggest fan of any particular artists. I generally would be fine with listening to a combonation of any genres or artists. Lately however, I have been getting into a Country Music phase. Of these artists that I’ve most recently listened to, I would have to say my favorites are Luke Bryan, and Luke Combs.\n\nspotify[spotify[\"artist_name\"] == \"Luke Bryan\"]\nspotify[spotify[\"artist_name\"] == \"Luke Combs\"]\n\n\n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n10926\n165\nseptember\n0\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n10933\n165\nseptember\n7\nLuke Combs\nMemories Are Made Of\n216666\nThis One's for You\n\n\n10934\n165\nseptember\n8\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n10935\n165\nseptember\n9\nLuke Combs\nI Know She Ain't Ready\n184746\nThe Way She Rides\n\n\n15308\n235\nMy happy place\n31\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n24418\n383\ncountry 2017\n1\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n26908\n412\nCountry\n183\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n30178\n456\nCountry\n41\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n30338\n456\nCountry\n201\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n30339\n456\nCountry\n202\nLuke Combs\nCan I Get an Outlaw\n238826\nCan I Get an Outlaw\n\n\n30341\n456\nCountry\n204\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n30359\n456\nCountry\n222\nLuke Combs\nI Know She Ain't Ready\n184746\nThe Way She Rides\n\n\n36878\n557\nWork\n4\nLuke Combs\nLet the Moonshine\n209266\nThe Way She Rides\n\n\n45491\n680\nCountry Favorites\n112\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n46433\n690\nDark Side\n25\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n47776\n706\nMY FAV\n4\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n53055\n796\nCountry\n41\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n53524\n803\nCountry\n189\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n74232\n1096\ncountry\n131\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n74981\n1109\njustin\n16\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n78311\n1161\ncountry favs\n14\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n78351\n1161\ncountry favs\n54\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n81092\n1206\nwes\n36\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n81106\n1206\nwes\n50\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n81107\n1206\nwes\n51\nLuke Combs\nUsed to You\n236506\nUsed to You\n\n\n86879\n1299\ncountry\n90\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n100977\n1504\nCountry\n27\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n101010\n1504\nCountry\n60\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n101021\n1504\nCountry\n71\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n107951\n1608\nCountry\n80\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n107983\n1608\nCountry\n112\nLuke Combs\nUsed to You\n236506\nUsed to You\n\n\n109040\n1622\nCountry\n69\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n115524\n1724\ncountry\n33\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n117190\n1756\nCountry\n77\nLuke Combs\nShe Got the Best of Me\n183160\nCan I Get an Outlaw\n\n\n136410\n999032\nWalk Up Songs\n1\nLuke Combs\nOut There\n203680\nThis One's for You\n\n\n136420\n999032\nWalk Up Songs\n11\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n140287\n999094\nsummer 2017\n0\nLuke Combs\nOne Number Away\n221800\nThis One's for You\n\n\n154162\n999300\nCountry Vibes\n30\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n189041\n999853\nsummer\n50\nLuke Combs\nWhen It Rains It Pours\n240760\nThis One's for You\n\n\n189046\n999853\nsummer\n55\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n193814\n999928\nSummer 2017\n30\nLuke Combs\nHurricane\n222533\nThis One's for You\n\n\n\n\n\n\n\nAfter seeing that each of these artists are in the DataFrame, we can now look at them individually.\nBefore we do that, we are going to switch the index to the artist to make it easier for us when looking at them individually.\n\nspotify = spotify.set_index(\"artist_name\")\n\n\n\nIn order to look at Luke Bryan’s songs within this DataFrame, we will create a new DataFrame of his songs only. Next we will look at how many songs of his are in the DataFrame. We will also look at how many of his albums have made it into the DataFrame as well. We can also find out the average time length of these songs. In order to do that, we need to get the time in milliseconds, and then convert it into minutes, rounding down. After we get the conversion, we take the remainder and convert that into seconds.\n\nLukeBryan = spotify.loc[\"Luke Bryan\"]\nnumberOfSongs = LukeBryan[\"track_name\"].nunique()\nnumberOfAlbums = LukeBryan[\"album_name\"].nunique()\naverageSongLengthInMS = float(LukeBryan[\"duration_ms\"].mean())\naverageSongLengthOfMins = int(averageSongLengthInMS / 60000)\naverageSongLengthOfSecs = int(((averageSongLengthInMS / 60000) - averageSongLengthOfMins) * 60)\naverageSongLength = str(averageSongLengthOfMins) + \":\" + str(averageSongLengthOfSecs)\nprint(\"In this DataFrame, Luke Bryan has\", numberOfSongs, \"songs, from\", numberOfAlbums, \"albums. Their songs average\", averageSongLength)\n\nIn this DataFrame, Luke Bryan has 73 songs, from 11 albums. Their songs average 3:36\n\n\nUsing this code, we have found that 73 of Luke Bryan’s songs are in this DataFrame, as well as 11 of his albums. The average time length of his songs are 3:36.\n\n\n\nNext we will be doing the same with Luke Combs. Everything will be the same, expect this time we will use Luke Combs, instead of Luke Bryan.\n\nLukeCombs = spotify.loc[\"Luke Combs\"]\nnumberOfSongs = LukeCombs[\"track_name\"].nunique()\nnumberOfAlbums = LukeCombs[\"album_name\"].nunique()\naverageSongLengthInMS = float(LukeCombs[\"duration_ms\"].mean())\naverageSongLengthOfMins = int(averageSongLengthInMS / 60000)\naverageSongLengthOfSecs = int(((averageSongLengthInMS / 60000) - averageSongLengthOfMins) * 60)\naverageSongLength = str(averageSongLengthOfMins) + \":\" + str(averageSongLengthOfSecs)\nprint(\"In this DataFrame, Luke Combs has\", numberOfSongs, \"songs, from\", numberOfAlbums, \"albums. Their songs average\", averageSongLength)\n\nIn this DataFrame, Luke Combs has 10 songs, from 4 albums. Their songs average 3:38\n\n\nUsing this code, we have found that only 10 of Luke Combs’ songs are in this DataFrame, as well as 4 of his albums. The average time length of his songs are 3:36."
  },
  {
    "objectID": "posts/Spotify/index.html#luke-bryan",
    "href": "posts/Spotify/index.html#luke-bryan",
    "title": "Spotify",
    "section": "",
    "text": "In order to look at Luke Bryan’s songs within this DataFrame, we will create a new DataFrame of his songs only. Next we will look at how many songs of his are in the DataFrame. We will also look at how many of his albums have made it into the DataFrame as well. We can also find out the average time length of these songs. In order to do that, we need to get the time in milliseconds, and then convert it into minutes, rounding down. After we get the conversion, we take the remainder and convert that into seconds.\n\nLukeBryan = spotify.loc[\"Luke Bryan\"]\nnumberOfSongs = LukeBryan[\"track_name\"].nunique()\nnumberOfAlbums = LukeBryan[\"album_name\"].nunique()\naverageSongLengthInMS = float(LukeBryan[\"duration_ms\"].mean())\naverageSongLengthOfMins = int(averageSongLengthInMS / 60000)\naverageSongLengthOfSecs = int(((averageSongLengthInMS / 60000) - averageSongLengthOfMins) * 60)\naverageSongLength = str(averageSongLengthOfMins) + \":\" + str(averageSongLengthOfSecs)\nprint(\"In this DataFrame, Luke Bryan has\", numberOfSongs, \"songs, from\", numberOfAlbums, \"albums. Their songs average\", averageSongLength)\n\nIn this DataFrame, Luke Bryan has 73 songs, from 11 albums. Their songs average 3:36\n\n\nUsing this code, we have found that 73 of Luke Bryan’s songs are in this DataFrame, as well as 11 of his albums. The average time length of his songs are 3:36."
  },
  {
    "objectID": "posts/Spotify/index.html#luke-combs",
    "href": "posts/Spotify/index.html#luke-combs",
    "title": "Spotify",
    "section": "",
    "text": "Next we will be doing the same with Luke Combs. Everything will be the same, expect this time we will use Luke Combs, instead of Luke Bryan.\n\nLukeCombs = spotify.loc[\"Luke Combs\"]\nnumberOfSongs = LukeCombs[\"track_name\"].nunique()\nnumberOfAlbums = LukeCombs[\"album_name\"].nunique()\naverageSongLengthInMS = float(LukeCombs[\"duration_ms\"].mean())\naverageSongLengthOfMins = int(averageSongLengthInMS / 60000)\naverageSongLengthOfSecs = int(((averageSongLengthInMS / 60000) - averageSongLengthOfMins) * 60)\naverageSongLength = str(averageSongLengthOfMins) + \":\" + str(averageSongLengthOfSecs)\nprint(\"In this DataFrame, Luke Combs has\", numberOfSongs, \"songs, from\", numberOfAlbums, \"albums. Their songs average\", averageSongLength)\n\nIn this DataFrame, Luke Combs has 10 songs, from 4 albums. Their songs average 3:38\n\n\nUsing this code, we have found that only 10 of Luke Combs’ songs are in this DataFrame, as well as 4 of his albums. The average time length of his songs are 3:36."
  },
  {
    "objectID": "posts/Final Project/index.html",
    "href": "posts/Final Project/index.html",
    "title": "Final Project",
    "section": "",
    "text": "In recent years, Environmental, Social, and Governance (ESG) has been on an uprise throughout the financial world. Companies have been using these metrics to show off their commitment towards helping the planet against Climate Change.\nUsing the data given from Yahoo Finance, we can look at the trend over time and see what changes. Since the stock market can vary a lot from day to day, we will look at the companies data from January 1st, 2024, to March 31st, 2025.\nTogether we will look at how much fighting against Climate Change will do for the company, and if they either lose more money by doing this, or if they even benefit by doing this and make more money.\n\n\n\nIn order to use the data we need from Yahoo Finance, we will get it using the Selenium Library in python. The first thing I did was, grab the symbol for each stock from our DataFrame given and use that in the Yahoo Finance URL in order to get that particular stocks information. On that page I used inspect to find the XPath for each of the ESG’s Risk Scores. Now that we have our Risk Scores, we need to grab the stocks history using the company’s history page on Yahoo Finance.\nIn order to do this, I used a different URL but still replaced the symbol for each stock in the URL, similar to before but on the company’s history page. After arriving on this page, I started to go through the table and get the data from each of the rows. Every once and a while I would get stuck because of the dividends for the company. When I got to the dividends, I created a new DataFrame that will hold the information of each of the companies dividends.\n\n\n\nThis project aims to look at the relationship between the Stocks ESG scores and the Stock Price. I chose to look at this data using a scatter plot and a linear regression line to the first degree. The scatter plot didn’t show much as there was a lot of back and forth going up and down, so I wanted to look at the linear regression line to see more in depth. After looking at the linear regression line, I was able to come to the conclusion that as the ESG Score decreases, the Stock Price increases. This means that the ESG Scores does not benefit towards the Stock Price and that fighting climate change might help the enviornment, but it doesn’t help the companies themself.\n\n\n\nYahoo Finance: Used to gather the information for both ESG Scores, and the stock prices during the durtion. This was also used in determining the prices at their high, low, open, close, etc."
  },
  {
    "objectID": "posts/Final Project/index.html#background-and-statement-of-the-probelm",
    "href": "posts/Final Project/index.html#background-and-statement-of-the-probelm",
    "title": "Final Project",
    "section": "",
    "text": "In recent years, Environmental, Social, and Governance (ESG) has been on an uprise throughout the financial world. Companies have been using these metrics to show off their commitment towards helping the planet against Climate Change.\nUsing the data given from Yahoo Finance, we can look at the trend over time and see what changes. Since the stock market can vary a lot from day to day, we will look at the companies data from January 1st, 2024, to March 31st, 2025.\nTogether we will look at how much fighting against Climate Change will do for the company, and if they either lose more money by doing this, or if they even benefit by doing this and make more money."
  },
  {
    "objectID": "posts/Final Project/index.html#data-collection",
    "href": "posts/Final Project/index.html#data-collection",
    "title": "Final Project",
    "section": "",
    "text": "In order to use the data we need from Yahoo Finance, we will get it using the Selenium Library in python. The first thing I did was, grab the symbol for each stock from our DataFrame given and use that in the Yahoo Finance URL in order to get that particular stocks information. On that page I used inspect to find the XPath for each of the ESG’s Risk Scores. Now that we have our Risk Scores, we need to grab the stocks history using the company’s history page on Yahoo Finance.\nIn order to do this, I used a different URL but still replaced the symbol for each stock in the URL, similar to before but on the company’s history page. After arriving on this page, I started to go through the table and get the data from each of the rows. Every once and a while I would get stuck because of the dividends for the company. When I got to the dividends, I created a new DataFrame that will hold the information of each of the companies dividends."
  },
  {
    "objectID": "posts/Final Project/index.html#signifigance-of-the-project",
    "href": "posts/Final Project/index.html#signifigance-of-the-project",
    "title": "Final Project",
    "section": "",
    "text": "This project aims to look at the relationship between the Stocks ESG scores and the Stock Price. I chose to look at this data using a scatter plot and a linear regression line to the first degree. The scatter plot didn’t show much as there was a lot of back and forth going up and down, so I wanted to look at the linear regression line to see more in depth. After looking at the linear regression line, I was able to come to the conclusion that as the ESG Score decreases, the Stock Price increases. This means that the ESG Scores does not benefit towards the Stock Price and that fighting climate change might help the enviornment, but it doesn’t help the companies themself."
  },
  {
    "objectID": "posts/Final Project/index.html#references",
    "href": "posts/Final Project/index.html#references",
    "title": "Final Project",
    "section": "",
    "text": "Yahoo Finance: Used to gather the information for both ESG Scores, and the stock prices during the durtion. This was also used in determining the prices at their high, low, open, close, etc."
  }
]